var ngPrint=angular.module("ngPrint",[]);
ngPrint.factory("pdfPrinter",["$q","$timeout",function(t){"use strict";var e=function(){var e=this,r=function(t,e){if(e=parseInt(e,10)||0,!e)return t;var r=document.createElement("canvas"),n=r.getContext("2d");return r.height=t.height-e,r.width=t.width,Pixastic.process(t,"crop",{rect:{left:0,top:e,width:t.width,height:t.height-e}},function(t){n.drawImage(t,0,0,t.width,t.height,0,0,t.width,t.height)}),r},n=function(t,e,n,i){for(var a=new jsPDF(e,n,i),h=a.internal,o=h.pageSize,d=h.scaleFactor,c=o.width,g=o.height,u=0,f=t.height,s=t.width/(c*d),w=0;f>u&&15>w;){var m=r(t,u),v=Math.random().toString(35);a.addImage(m,0,0,c,0,"png",v,"SLOW"),u+=g*d*s,f>u&&a.addPage(),w+=1}return a};e.generatePdfFromElement=function(e,r,i,a){var h=t.defer();return html2canvas(e,{onrendered:function(t){var e=n(t,r,i,a);h.resolve(e)}}),h.promise}},r=new e;return r}]);
ngPrint.directive("ngPrintButton",["$window","pdfPrinter",function(t,n){"use strict";return{restrict:"AC",require:"^ngPrintable",scope:{printWholePage:"&?",saveAs:"@?"},link:function(e,i,r,a){var o=function(t){return{orientation:t[0].attributes.orientation?t[0].attributes.orientation.value:"p",unit:t[0].attributes.unit?t[0].attributes.unit.value:"pt",format:t[0].attributes.format?t[0].attributes.format.value:"a4"}};e.print=function(){var i;if(e.printWholePage()?i=t.document.body:a&&(i=a.getElement()),!i)throw new SyntaxError("No template element provided. Try using ngPrintable directive.");var r=o(i),u=n.generatePdfFromElement(i,r.orientation,r.unit,r.format);u.then(function(t){e.saveAs?t.save(e.saveAs):t.output("dataurlnewwindow"),t=null})},i.on("click",function(){e.print()})}}}]);
ngPrint.directive("ngPrintable",[function(){"use strict";return{restrict:"A",scope:{orientation:"@?",unit:"@?",format:"@?"},link:function(t,n){t.element=n},controller:["$scope",function(t){this.getElement=function(){return t.element}}]}}]);
//# sourceMappingURL=data:application/json;base64,